{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"./utils/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"./utils/invariant\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var StateUtils = {\n    get: function get(state, key) {\n      return state.routes.find(function (route) {\n        return route.key === key;\n      }) || null;\n    },\n    indexOf: function indexOf(state, key) {\n      return state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n    },\n    has: function has(state, key) {\n      return !!state.routes.some(function (route) {\n        return route.key === key;\n      });\n    },\n    push: function push(state, route) {\n      (0, _invariant.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n      var routes = state.routes.slice();\n      routes.push(route);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    pop: function pop(state) {\n      if (state.index <= 0) {\n        return state;\n      }\n\n      var routes = state.routes.slice(0, -1);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    jumpToIndex: function jumpToIndex(state, index) {\n      if (index === state.index) {\n        return state;\n      }\n\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s to jump to', index);\n      return _objectSpread({}, state, {\n        index: index\n      });\n    },\n    jumpTo: function jumpTo(state, key) {\n      var index = StateUtils.indexOf(state, key);\n      return StateUtils.jumpToIndex(state, index);\n    },\n    back: function back(state) {\n      var index = state.index - 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    forward: function forward(state) {\n      var index = state.index + 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    replaceAndPrune: function replaceAndPrune(state, key, route) {\n      var index = StateUtils.indexOf(state, key);\n      var replaced = StateUtils.replaceAtIndex(state, index, route);\n      return _objectSpread({}, replaced, {\n        routes: replaced.routes.slice(0, index + 1)\n      });\n    },\n    replaceAt: function replaceAt(state, key, route) {\n      var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var index = StateUtils.indexOf(state, key);\n      var nextIndex = preserveIndex ? state.index : index;\n      var nextState = StateUtils.replaceAtIndex(state, index, route);\n      nextState.index = nextIndex;\n      return nextState;\n    },\n    replaceAtIndex: function replaceAtIndex(state, index, route) {\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n      if (state.routes[index] === route && index === state.index) {\n        return state;\n      }\n\n      var routes = state.routes.slice();\n      routes[index] = route;\n      return _objectSpread({}, state, {\n        index: index,\n        routes: routes\n      });\n    },\n    reset: function reset(state, routes, index) {\n      (0, _invariant.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');\n      var nextIndex = index === undefined ? routes.length - 1 : index;\n\n      if (state.routes.length === routes.length && state.index === nextIndex) {\n        var compare = function compare(route, ii) {\n          return routes[ii] === route;\n        };\n\n        if (state.routes.every(compare)) {\n          return state;\n        }\n      }\n\n      (0, _invariant.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n      return _objectSpread({}, state, {\n        index: nextIndex,\n        routes: routes\n      });\n    }\n  };\n  var _default = StateUtils;\n  exports.default = _default;\n});","map":[[11,0,1,0],[17,0,11,0],[17,6,11,6,"StateUtils"],[17,16,11,16],[17,19,11,19],[18,0,15,2,"get"],[18,4,15,2,"get"],[18,7,11,19],[18,22,15,6,"state"],[18,27,11,19],[18,29,15,13,"key"],[18,32,11,19],[18,34,15,18],[19,0,16,4],[19,13,16,11,"state"],[19,18,16,16],[19,19,16,17,"routes"],[19,25,16,11],[19,26,16,24,"find"],[19,30,16,11],[19,31,16,29],[19,41,16,29,"route"],[19,46,16,34],[20,0,16,34],[20,15,16,38,"route"],[20,20,16,43],[20,21,16,44,"key"],[20,24,16,38],[20,29,16,52,"key"],[20,32,16,34],[21,0,16,34],[21,7,16,11],[21,12,16,60],[21,16,16,4],[22,0,17,3],[22,5,11,19],[23,0,23,2,"indexOf"],[23,4,23,2,"indexOf"],[23,11,11,19],[23,30,23,10,"state"],[23,35,11,19],[23,37,23,17,"key"],[23,40,11,19],[23,42,23,22],[24,0,24,4],[24,13,24,11,"state"],[24,18,24,16],[24,19,24,17,"routes"],[24,25,24,11],[24,26,24,24,"findIndex"],[24,35,24,11],[24,36,24,34],[24,46,24,34,"route"],[24,51,24,39],[25,0,24,39],[25,15,24,43,"route"],[25,20,24,48],[25,21,24,49,"key"],[25,24,24,43],[25,29,24,57,"key"],[25,32,24,39],[26,0,24,39],[26,7,24,11],[26,8,24,4],[27,0,25,3],[27,5,11,19],[28,0,31,2,"has"],[28,4,31,2,"has"],[28,7,11,19],[28,22,31,6,"state"],[28,27,11,19],[28,29,31,13,"key"],[28,32,11,19],[28,34,31,18],[29,0,32,4],[29,13,32,11],[29,14,32,12],[29,15,32,13,"state"],[29,20,32,18],[29,21,32,19,"routes"],[29,27,32,13],[29,28,32,26,"some"],[29,32,32,13],[29,33,32,31],[29,43,32,31,"route"],[29,48,32,36],[30,0,32,36],[30,15,32,40,"route"],[30,20,32,45],[30,21,32,46,"key"],[30,24,32,40],[30,29,32,54,"key"],[30,32,32,36],[31,0,32,36],[31,7,32,13],[31,8,32,4],[32,0,33,3],[32,5,11,19],[33,0,40,2,"push"],[33,4,40,2,"push"],[33,8,11,19],[33,24,40,7,"state"],[33,29,11,19],[33,31,40,14,"route"],[33,36,11,19],[33,38,40,21],[34,0,41,4],[34,30,42,6,"StateUtils"],[34,40,42,16],[34,41,42,17,"indexOf"],[34,48,42,6],[34,49,42,25,"state"],[34,54,42,6],[34,56,42,32,"route"],[34,61,42,37],[34,62,42,38,"key"],[34,65,42,6],[34,71,42,47],[34,72,42,48],[34,73,41,4],[34,75,43,6],[34,121,41,4],[34,123,44,6,"route"],[34,128,44,11],[34,129,44,12,"key"],[34,132,41,4],[35,0,47,4],[35,10,47,10,"routes"],[35,16,47,16],[35,19,47,19,"state"],[35,24,47,24],[35,25,47,25,"routes"],[35,31,47,19],[35,32,47,32,"slice"],[35,37,47,19],[35,39,47,4],[36,0,48,4,"routes"],[36,6,48,4,"routes"],[36,12,48,10],[36,13,48,11,"push"],[36,17,48,4],[36,18,48,16,"route"],[36,23,48,4],[37,0,50,4],[37,31,51,9,"state"],[37,36,50,4],[38,0,52,6,"index"],[38,8,52,6,"index"],[38,13,52,11],[38,15,52,13,"routes"],[38,21,52,19],[38,22,52,20,"length"],[38,28,52,13],[38,31,52,29],[38,32,50,4],[39,0,53,6,"routes"],[39,8,53,6,"routes"],[39,14,53,12],[39,16,53,6,"routes"],[40,0,50,4],[41,0,55,3],[41,5,11,19],[42,0,62,2,"pop"],[42,4,62,2,"pop"],[42,7,11,19],[42,22,62,6,"state"],[42,27,11,19],[42,29,62,13],[43,0,63,4],[43,10,63,8,"state"],[43,15,63,13],[43,16,63,14,"index"],[43,21,63,8],[43,25,63,23],[43,26,63,4],[43,28,63,26],[44,0,65,6],[44,15,65,13,"state"],[44,20,65,6],[45,0,66,5],[47,0,67,4],[47,10,67,10,"routes"],[47,16,67,16],[47,19,67,19,"state"],[47,24,67,24],[47,25,67,25,"routes"],[47,31,67,19],[47,32,67,32,"slice"],[47,37,67,19],[47,38,67,38],[47,39,67,19],[47,41,67,41],[47,42,67,42],[47,43,67,19],[47,44,67,4],[48,0,68,4],[48,31,69,9,"state"],[48,36,68,4],[49,0,70,6,"index"],[49,8,70,6,"index"],[49,13,70,11],[49,15,70,13,"routes"],[49,21,70,19],[49,22,70,20,"length"],[49,28,70,13],[49,31,70,29],[49,32,68,4],[50,0,71,6,"routes"],[50,8,71,6,"routes"],[50,14,71,12],[50,16,71,6,"routes"],[51,0,68,4],[52,0,73,3],[52,5,11,19],[53,0,78,2,"jumpToIndex"],[53,4,78,2,"jumpToIndex"],[53,15,11,19],[53,38,78,14,"state"],[53,43,11,19],[53,45,78,21,"index"],[53,50,11,19],[53,52,78,28],[54,0,79,4],[54,10,79,8,"index"],[54,15,79,13],[54,20,79,18,"state"],[54,25,79,23],[54,26,79,24,"index"],[54,31,79,4],[54,33,79,31],[55,0,80,6],[55,15,80,13,"state"],[55,20,80,6],[56,0,81,5],[58,0,83,4],[58,30,83,14],[58,31,83,15],[58,32,83,16,"state"],[58,37,83,21],[58,38,83,22,"routes"],[58,44,83,16],[58,45,83,29,"index"],[58,50,83,16],[58,51,83,4],[58,53,83,37],[58,82,83,4],[58,84,83,68,"index"],[58,89,83,4],[59,0,85,4],[59,31,86,9,"state"],[59,36,85,4],[60,0,87,6,"index"],[60,8,87,6,"index"],[60,13,87,11],[60,15,87,6,"index"],[61,0,85,4],[62,0,89,3],[62,5,11,19],[63,0,94,2,"jumpTo"],[63,4,94,2,"jumpTo"],[63,10,11,19],[63,28,94,9,"state"],[63,33,11,19],[63,35,94,16,"key"],[63,38,11,19],[63,40,94,21],[64,0,95,4],[64,10,95,10,"index"],[64,15,95,15],[64,18,95,18,"StateUtils"],[64,28,95,28],[64,29,95,29,"indexOf"],[64,36,95,18],[64,37,95,37,"state"],[64,42,95,18],[64,44,95,44,"key"],[64,47,95,18],[64,48,95,4],[65,0,96,4],[65,13,96,11,"StateUtils"],[65,23,96,21],[65,24,96,22,"jumpToIndex"],[65,35,96,11],[65,36,96,34,"state"],[65,41,96,11],[65,43,96,41,"index"],[65,48,96,11],[65,49,96,4],[66,0,97,3],[66,5,11,19],[67,0,102,2,"back"],[67,4,102,2,"back"],[67,8,11,19],[67,24,102,7,"state"],[67,29,11,19],[67,31,102,14],[68,0,103,4],[68,10,103,10,"index"],[68,15,103,15],[68,18,103,18,"state"],[68,23,103,23],[68,24,103,24,"index"],[68,29,103,18],[68,32,103,32],[68,33,103,4],[69,0,104,4],[69,10,104,10,"route"],[69,15,104,15],[69,18,104,18,"state"],[69,23,104,23],[69,24,104,24,"routes"],[69,30,104,18],[69,31,104,31,"index"],[69,36,104,18],[69,37,104,4],[70,0,105,4],[70,13,105,11,"route"],[70,18,105,16],[70,21,105,19,"StateUtils"],[70,31,105,29],[70,32,105,30,"jumpToIndex"],[70,43,105,19],[70,44,105,42,"state"],[70,49,105,19],[70,51,105,49,"index"],[70,56,105,19],[70,57,105,16],[70,60,105,58,"state"],[70,65,105,4],[71,0,106,3],[71,5,11,19],[72,0,111,2,"forward"],[72,4,111,2,"forward"],[72,11,11,19],[72,30,111,10,"state"],[72,35,11,19],[72,37,111,17],[73,0,112,4],[73,10,112,10,"index"],[73,15,112,15],[73,18,112,18,"state"],[73,23,112,23],[73,24,112,24,"index"],[73,29,112,18],[73,32,112,32],[73,33,112,4],[74,0,113,4],[74,10,113,10,"route"],[74,15,113,15],[74,18,113,18,"state"],[74,23,113,23],[74,24,113,24,"routes"],[74,30,113,18],[74,31,113,31,"index"],[74,36,113,18],[74,37,113,4],[75,0,114,4],[75,13,114,11,"route"],[75,18,114,16],[75,21,114,19,"StateUtils"],[75,31,114,29],[75,32,114,30,"jumpToIndex"],[75,43,114,19],[75,44,114,42,"state"],[75,49,114,19],[75,51,114,49,"index"],[75,56,114,19],[75,57,114,16],[75,60,114,58,"state"],[75,65,114,4],[76,0,115,3],[76,5,11,19],[77,0,122,2,"replaceAndPrune"],[77,4,122,2,"replaceAndPrune"],[77,19,11,19],[77,46,122,18,"state"],[77,51,11,19],[77,53,122,25,"key"],[77,56,11,19],[77,58,122,30,"route"],[77,63,11,19],[77,65,122,37],[78,0,123,4],[78,10,123,10,"index"],[78,15,123,15],[78,18,123,18,"StateUtils"],[78,28,123,28],[78,29,123,29,"indexOf"],[78,36,123,18],[78,37,123,37,"state"],[78,42,123,18],[78,44,123,44,"key"],[78,47,123,18],[78,48,123,4],[79,0,124,4],[79,10,124,10,"replaced"],[79,18,124,18],[79,21,124,21,"StateUtils"],[79,31,124,31],[79,32,124,32,"replaceAtIndex"],[79,46,124,21],[79,47,124,47,"state"],[79,52,124,21],[79,54,124,54,"index"],[79,59,124,21],[79,61,124,61,"route"],[79,66,124,21],[79,67,124,4],[80,0,126,4],[80,31,127,9,"replaced"],[80,39,126,4],[81,0,128,6,"routes"],[81,8,128,6,"routes"],[81,14,128,12],[81,16,128,14,"replaced"],[81,24,128,22],[81,25,128,23,"routes"],[81,31,128,14],[81,32,128,30,"slice"],[81,37,128,14],[81,38,128,36],[81,39,128,14],[81,41,128,39,"index"],[81,46,128,44],[81,49,128,47],[81,50,128,14],[82,0,126,4],[83,0,130,3],[83,5,11,19],[84,0,139,2,"replaceAt"],[84,4,139,2,"replaceAt"],[84,13,11,19],[84,34,139,12,"state"],[84,39,11,19],[84,41,139,19,"key"],[84,44,11,19],[84,46,139,24,"route"],[84,51,11,19],[84,53,139,54],[85,0,139,54],[85,10,139,31,"preserveIndex"],[85,23,139,54],[85,94,139,47],[85,99,139,54],[86,0,140,4],[86,10,140,10,"index"],[86,15,140,15],[86,18,140,18,"StateUtils"],[86,28,140,28],[86,29,140,29,"indexOf"],[86,36,140,18],[86,37,140,37,"state"],[86,42,140,18],[86,44,140,44,"key"],[86,47,140,18],[86,48,140,4],[87,0,141,4],[87,10,141,10,"nextIndex"],[87,19,141,19],[87,22,141,22,"preserveIndex"],[87,35,141,35],[87,38,141,38,"state"],[87,43,141,43],[87,44,141,44,"index"],[87,49,141,35],[87,52,141,52,"index"],[87,57,141,4],[88,0,142,4],[88,10,142,8,"nextState"],[88,19,142,17],[88,22,142,20,"StateUtils"],[88,32,142,30],[88,33,142,31,"replaceAtIndex"],[88,47,142,20],[88,48,142,46,"state"],[88,53,142,20],[88,55,142,53,"index"],[88,60,142,20],[88,62,142,60,"route"],[88,67,142,20],[88,68,142,4],[89,0,143,4,"nextState"],[89,6,143,4,"nextState"],[89,15,143,13],[89,16,143,14,"index"],[89,21,143,4],[89,24,143,22,"nextIndex"],[89,33,143,4],[90,0,144,4],[90,13,144,11,"nextState"],[90,22,144,4],[91,0,145,3],[91,5,11,19],[92,0,152,2,"replaceAtIndex"],[92,4,152,2,"replaceAtIndex"],[92,18,11,19],[92,44,152,17,"state"],[92,49,11,19],[92,51,152,24,"index"],[92,56,11,19],[92,58,152,31,"route"],[92,63,11,19],[92,65,152,38],[93,0,153,4],[93,30,154,6],[93,31,154,7],[93,32,154,8,"state"],[93,37,154,13],[93,38,154,14,"routes"],[93,44,154,8],[93,45,154,21,"index"],[93,50,154,8],[93,51,153,4],[93,53,155,6],[93,94,153,4],[93,96,156,6,"index"],[93,101,153,4],[93,103,157,6,"route"],[93,108,157,11],[93,109,157,12,"key"],[93,112,153,4],[95,0,160,4],[95,10,160,8,"state"],[95,15,160,13],[95,16,160,14,"routes"],[95,22,160,8],[95,23,160,21,"index"],[95,28,160,8],[95,34,160,32,"route"],[95,39,160,8],[95,43,160,41,"index"],[95,48,160,46],[95,53,160,51,"state"],[95,58,160,56],[95,59,160,57,"index"],[95,64,160,4],[95,66,160,64],[96,0,161,6],[96,15,161,13,"state"],[96,20,161,6],[97,0,162,5],[99,0,164,4],[99,10,164,10,"routes"],[99,16,164,16],[99,19,164,19,"state"],[99,24,164,24],[99,25,164,25,"routes"],[99,31,164,19],[99,32,164,32,"slice"],[99,37,164,19],[99,39,164,4],[100,0,165,4,"routes"],[100,6,165,4,"routes"],[100,12,165,10],[100,13,165,11,"index"],[100,18,165,10],[100,19,165,4],[100,22,165,20,"route"],[100,27,165,4],[101,0,167,4],[101,31,168,9,"state"],[101,36,167,4],[102,0,169,6,"index"],[102,8,169,6,"index"],[102,13,169,11],[102,15,169,6,"index"],[102,20,167,4],[103,0,170,6,"routes"],[103,8,170,6,"routes"],[103,14,170,12],[103,16,170,6,"routes"],[104,0,167,4],[105,0,172,3],[105,5,11,19],[106,0,179,2,"reset"],[106,4,179,2,"reset"],[106,9,11,19],[106,26,179,8,"state"],[106,31,11,19],[106,33,179,15,"routes"],[106,39,11,19],[106,41,179,23,"index"],[106,46,11,19],[106,48,179,30],[107,0,180,4],[107,30,181,6,"routes"],[107,36,181,12],[107,37,181,13,"length"],[107,43,181,6],[107,47,181,23,"Array"],[107,52,181,28],[107,53,181,29,"isArray"],[107,60,181,23],[107,61,181,37,"routes"],[107,67,181,23],[107,68,180,4],[107,70,182,6],[107,97,180,4],[108,0,185,4],[108,10,185,10,"nextIndex"],[108,19,185,19],[108,22,185,22,"index"],[108,27,185,27],[108,32,185,32,"undefined"],[108,41,185,22],[108,44,185,44,"routes"],[108,50,185,50],[108,51,185,51,"length"],[108,57,185,44],[108,60,185,60],[108,61,185,22],[108,64,185,64,"index"],[108,69,185,4],[110,0,187,4],[110,10,187,8,"state"],[110,15,187,13],[110,16,187,14,"routes"],[110,22,187,8],[110,23,187,21,"length"],[110,29,187,8],[110,34,187,32,"routes"],[110,40,187,38],[110,41,187,39,"length"],[110,47,187,8],[110,51,187,49,"state"],[110,56,187,54],[110,57,187,55,"index"],[110,62,187,49],[110,67,187,65,"nextIndex"],[110,76,187,4],[110,78,187,76],[111,0,188,6],[111,12,188,12,"compare"],[111,19,188,19],[111,22,188,22],[111,31,188,12,"compare"],[111,38,188,22],[111,39,188,23,"route"],[111,44,188,22],[111,46,188,30,"ii"],[111,48,188,22],[112,0,188,22],[112,17,188,37,"routes"],[112,23,188,43],[112,24,188,44,"ii"],[112,26,188,43],[112,27,188,37],[112,32,188,52,"route"],[112,37,188,22],[113,0,188,22],[113,9,188,6],[115,0,189,6],[115,12,189,10,"state"],[115,17,189,15],[115,18,189,16,"routes"],[115,24,189,10],[115,25,189,23,"every"],[115,30,189,10],[115,31,189,29,"compare"],[115,38,189,10],[115,39,189,6],[115,41,189,39],[116,0,190,8],[116,17,190,15,"state"],[116,22,190,8],[117,0,191,7],[118,0,192,5],[120,0,194,4],[120,30,194,14],[120,31,194,15],[120,32,194,16,"routes"],[120,38,194,22],[120,39,194,23,"nextIndex"],[120,48,194,22],[120,49,194,4],[120,51,194,35],[120,78,194,4],[120,80,194,64,"nextIndex"],[120,89,194,4],[121,0,196,4],[121,31,197,9,"state"],[121,36,196,4],[122,0,198,6,"index"],[122,8,198,6,"index"],[122,13,198,11],[122,15,198,13,"nextIndex"],[122,24,196,4],[123,0,199,6,"routes"],[123,8,199,6,"routes"],[123,14,199,12],[123,16,199,6,"routes"],[124,0,196,4],[125,0,201,3],[126,0,11,19],[126,3,11,0],[127,17,204,15,"StateUtils"],[127,27]]},"type":"js/module"}]}